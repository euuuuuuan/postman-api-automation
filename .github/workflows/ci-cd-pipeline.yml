name: QA API Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 매일 오전 9시 (UTC)에 자동 실행
    - cron: '0 9 * * *'
  workflow_dispatch:
    # 수동 실행 가능

permissions:
  contents: read
  security-events: write
  checks: write

jobs:
  # 코드 품질 검사
  lint-and-format:
    runs-on: ubuntu-latest
    name: Code Quality Check

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # E501: line too long 에러는 무시 (--ignore=E501)
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --ignore=E501,W503 --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check import sorting
      run: |
        isort --check-only --diff .

    - name: Check code formatting
      run: |
        black --check --diff .

  # API 테스트 실행 (여러 Python 버전)
  api-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.12]

    name: API Tests (Python ${{ matrix.python-version }})

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create reports directory
      run: |
        mkdir -p python-tests/reports

    - name: Run smoke tests
      run: |
        python -m pytest python-tests/test_api_standalone.py -m smoke -v \
          --junitxml=python-tests/reports/smoke-results.xml \
          --html=python-tests/reports/smoke-report.html --self-contained-html

    - name: Run functional tests
      run: |
        python -m pytest python-tests/test_api_standalone.py -m functional -v \
          --junitxml=python-tests/reports/functional-results.xml \
          --html=python-tests/reports/functional-report.html --self-contained-html

    - name: Run negative tests
      run: |
        python -m pytest python-tests/test_api_standalone.py -m negative -v \
          --junitxml=python-tests/reports/negative-results.xml \
          --html=python-tests/reports/negative-report.html --self-contained-html

    - name: Run performance tests
      run: |
        python -m pytest python-tests/test_api_standalone.py -m performance -v \
          --junitxml=python-tests/reports/performance-results.xml \
          --html=python-tests/reports/performance-report.html --self-contained-html

    - name: Run all tests with coverage
      run: |
        python -m pytest python-tests/test_api_standalone.py -v \
          --junitxml=python-tests/reports/all-results.xml \
          --html=python-tests/reports/all-tests-report.html --self-contained-html \
          --json-report --json-report-file=python-tests/reports/report.json

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-python${{ matrix.python-version }}
        path: python-tests/reports/
        retention-days: 30

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: API Test Results (Python ${{ matrix.python-version }})
        path: python-tests/reports/*-results.xml
        reporter: java-junit

  # Postman 테스트 실행
  postman-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    name: Postman API Tests

    steps:
    - uses: actions/checkout@v4

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Install Newman
      run: |
        npm install -g newman newman-reporter-htmlextra

    - name: Run Postman Collection
      run: |
        if [ -f "postman-collections/ShopAPI-Test-Suite.postman_collection.json" ]; then
          newman run postman-collections/ShopAPI-Test-Suite.postman_collection.json \
            -e postman-collections/JSONPlaceholder.postman_environment.json \
            --reporters cli,htmlextra \
            --reporter-htmlextra-export postman-tests/reports/postman-report.html \
            --reporter-htmlextra-title "ShopAPI Test Results"
        else
          echo "Postman collection not found, skipping..."
        fi

    - name: Upload Postman test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: postman-test-results
        path: postman-tests/reports/
        retention-days: 30

  # 성능 테스트 (부하 테스트)
  performance-tests:
    runs-on: ubuntu-latest
    needs: api-tests
    name: Performance & Load Testing

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Create Locust test file
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import random

        class APIUser(HttpUser):
            wait_time = between(1, 3)
            host = "https://jsonplaceholder.typicode.com"
            
            @task(3)
            def get_all_posts(self):
                self.client.get("/posts")
            
            @task(2)
            def get_single_post(self):
                post_id = random.randint(1, 100)
                self.client.get(f"/posts/{post_id}")
            
            @task(1)
            def create_post(self):
                self.client.post("/posts", json={
                    "title": "Load test post",
                    "body": "Created by load testing",
                    "userId": 1
                })
        EOF

    - name: Run load test
      run: |
        mkdir -p performance-tests/reports
        locust -f locustfile.py --headless \
          --users 10 --spawn-rate 2 --run-time 60s \
          --html performance-tests/reports/load-test-report.html \
          --csv performance-tests/reports/load-test

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance-tests/reports/
        retention-days: 30

  # 보안 스캔
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 테스트 결과 요약 및 알림
  test-summary:
    runs-on: ubuntu-latest
    needs: [api-tests, postman-tests, performance-tests]
    if: always()
    name: Test Results Summary

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create test summary
      run: |
        echo "# QA API Test Suite Results" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Execution Summary" >> test-summary.md
        echo "- **Date**: $(date)" >> test-summary.md
        echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
        echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
        echo "" >> test-summary.md
        
        # API 테스트 결과
        if [ -d "test-results-python3.11" ]; then
          echo "## API Tests Results ✅" >> test-summary.md
          echo "- Python 3.11 tests completed" >> test-summary.md
        else
          echo "## API Tests Results ❌" >> test-summary.md
        fi
        
        # Postman 테스트 결과
        if [ -d "postman-test-results" ]; then
          echo "## Postman Tests Results ✅" >> test-summary.md
        else
          echo "## Postman Tests Results ❌" >> test-summary.md
        fi
        
        # 성능 테스트 결과
        if [ -d "performance-test-results" ]; then
          echo "## Performance Tests Results ✅" >> test-summary.md
        else
          echo "## Performance Tests Results ❌" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "View detailed reports in the Actions artifacts." >> test-summary.md

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # 배포 (성공 시에만)
  deploy-reports:
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: success() && github.ref == 'refs/heads/main'
    name: Deploy Test Reports

    steps:
    - uses: actions/checkout@v4

    - name: Download test results
      uses: actions/download-artifact@v4

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Create pages structure
      run: |
        mkdir -p _site
        echo "# QA API Test Suite Reports" > _site/index.md
        echo "" >> _site/index.md
        echo "## Latest Test Reports" >> _site/index.md
        echo "- [Python API Tests](./test-results-python3.11/all-tests-report.html)" >> _site/index.md
        echo "- [Postman Tests](./postman-test-results/postman-report.html)" >> _site/index.md
        echo "- [Performance Tests](./performance-test-results/load-test-report.html)" >> _site/index.md
        
        # Copy all reports
        if [ -d "test-results-python3.11" ]; then
          cp -r test-results-python3.11 _site/
        fi
        if [ -d "postman-test-results" ]; then
          cp -r postman-test-results _site/
        fi
        if [ -d "performance-test-results" ]; then
          cp -r performance-test-results _site/
        fi

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2