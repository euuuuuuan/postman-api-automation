{
	"info": {
		"_postman_id": "d22d5f97-95de-40e0-ae2b-1c68754880fd",
		"name": "ShopAPI Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48449419",
		"_collection_link": "https://euuuuuuan-4768426.postman.co/workspace/Euan's-Workspace~a1a350f3-7bbd-4f1c-845f-1e2d1d617eec/collection/48449419-d22d5f97-95de-40e0-ae2b-1c68754880fd?action=share&source=collection_link&creator=48449419"
	},
	"item": [
		{
			"name": "GET All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===========================================\r",
							"// TC-001: GET /posts - 전체 게시글 조회 테스트\r",
							"// ===========================================\r",
							"\r",
							"// Tests 탭에 추가할 스크립트:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Array contains 100 posts\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.have.lengthOf(100);\r",
							"});\r",
							"\r",
							"pm.test(\"Each post has required fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    responseJson.forEach(post => {\r",
							"        pm.expect(post).to.have.property('id');\r",
							"        pm.expect(post).to.have.property('title');\r",
							"        pm.expect(post).to.have.property('body');\r",
							"        pm.expect(post).to.have.property('userId');\r",
							"        pm.expect(post.id).to.be.a('number');\r",
							"        pm.expect(post.title).to.be.a('string');\r",
							"        pm.expect(post.body).to.be.a('string');\r",
							"        pm.expect(post.userId).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// ===========================================\r",
							"// 리포트를 위한 추가 스크립트\r",
							"// ===========================================\r",
							"\r",
							"// 각 테스트 후 실행되는 공통 스크립트 (Tests 탭 맨 아래 추가):\r",
							"pm.test(\"Record test execution\", function () {\r",
							"    const testName = pm.info.requestName;\r",
							"    const status = pm.response.code;\r",
							"    const responseTime = pm.response.responseTime;\r",
							"    \r",
							"    console.log(`✅ ${testName}: ${status} (${responseTime}ms)`);\r",
							"});\r",
							"\r",
							"// 실패한 테스트 상세 로깅\r",
							"pm.test.index > 0 && pm.test(\"Log failures for debugging\", function () {\r",
							"    if (pm.response.code >= 400) {\r",
							"        console.log(\"❌ Error Response Body:\", pm.response.text());\r",
							"        console.log(\"❌ Request Headers:\", JSON.stringify(pm.request.headers.toObject()));\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single Post (Valid ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===========================================\r",
							"// TC-002: GET /posts/{id} - 특정 게시글 조회\r",
							"// ===========================================\r",
							"\r",
							"// Tests 탭에 추가할 스크립트:\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is acceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct post\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const expectedId = parseInt(pm.environment.get(\"validPostId\"));\r",
							"    \r",
							"    pm.expect(responseJson.id).to.equal(expectedId);\r",
							"    pm.expect(responseJson).to.have.property('title');\r",
							"    pm.expect(responseJson).to.have.property('body');\r",
							"    pm.expect(responseJson).to.have.property('userId');\r",
							"});\r",
							"\r",
							"pm.test(\"Post title is not empty\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.title).to.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Post body is not empty\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.body).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// 다음 테스트에서 사용할 데이터 저장\r",
							"pm.test(\"Save post data for future tests\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.environment.set(\"postTitle\", responseJson.title);\r",
							"    pm.environment.set(\"postUserId\", responseJson.userId.toString());\r",
							"});\r",
							"\r",
							"\r",
							"// ===========================================\r",
							"// 리포트를 위한 추가 스크립트\r",
							"// ===========================================\r",
							"\r",
							"// 각 테스트 후 실행되는 공통 스크립트 (Tests 탭 맨 아래 추가):\r",
							"pm.test(\"Record test execution\", function () {\r",
							"    const testName = pm.info.requestName;\r",
							"    const status = pm.response.code;\r",
							"    const responseTime = pm.response.responseTime;\r",
							"    \r",
							"    console.log(`✅ ${testName}: ${status} (${responseTime}ms)`);\r",
							"});\r",
							"\r",
							"// 실패한 테스트 상세 로깅\r",
							"pm.test.index > 0 && pm.test(\"Log failures for debugging\", function () {\r",
							"    if (pm.response.code >= 400) {\r",
							"        console.log(\"❌ Error Response Body:\", pm.response.text());\r",
							"        console.log(\"❌ Request Headers:\", JSON.stringify(pm.request.headers.toObject()));\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Single Post (Invalid ID)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===========================================\r",
							"// TC-003: GET /posts/{id} - 존재하지 않는 게시글\r",
							"// ===========================================\r",
							"\r",
							"// Tests 탭에 추가할 스크립트:\r",
							"pm.test(\"Status code indicates not found or empty result\", function () {\r",
							"    // JSONPlaceholder는 404 대신 빈 객체를 반환할 수 있음\r",
							"    pm.expect([200, 404]).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Response handles invalid ID appropriately\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    if (pm.response.code === 404) {\r",
							"        pm.expect(responseJson).to.have.property('error');\r",
							"    } else if (pm.response.code === 200) {\r",
							"        // 빈 객체이거나 null 값들을 가져야 함\r",
							"        pm.expect(Object.keys(responseJson)).to.have.lengthOf.at.most(4);\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is acceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"// ===========================================\r",
							"// 리포트를 위한 추가 스크립트\r",
							"// ===========================================\r",
							"\r",
							"// 각 테스트 후 실행되는 공통 스크립트 (Tests 탭 맨 아래 추가):\r",
							"pm.test(\"Record test execution\", function () {\r",
							"    const testName = pm.info.requestName;\r",
							"    const status = pm.response.code;\r",
							"    const responseTime = pm.response.responseTime;\r",
							"    \r",
							"    console.log(`✅ ${testName}: ${status} (${responseTime}ms)`);\r",
							"});\r",
							"\r",
							"// 실패한 테스트 상세 로깅\r",
							"pm.test.index > 0 && pm.test(\"Log failures for debugging\", function () {\r",
							"    if (pm.response.code >= 400) {\r",
							"        console.log(\"❌ Error Response Body:\", pm.response.text());\r",
							"        console.log(\"❌ Request Headers:\", JSON.stringify(pm.request.headers.toObject()));\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create New Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===========================================\r",
							"// TC-004: POST /posts - 새 게시글 생성\r",
							"// ===========================================\r",
							"\r",
							"// Pre-request Script 탭에 추가:\r",
							"// 동적 테스트 데이터 생성\r",
							"const randomTitle = \"Test Post \" + Math.floor(Math.random() * 1000);\r",
							"const randomBody = \"This is test content created at \" + new Date().toISOString();\r",
							"\r",
							"pm.environment.set(\"randomTitle\", randomTitle);\r",
							"pm.environment.set(\"randomBody\", randomBody);\r",
							"\r",
							"// Request Body (JSON 형식으로 설정):\r",
							"/*\r",
							"{\r",
							"  \"title\": \"{{randomTitle}}\",\r",
							"  \"body\": \"{{randomBody}}\",\r",
							"  \"userId\": 1\r",
							"}\r",
							"*/\r",
							"\r",
							"// Tests 탭에 추가할 스크립트:\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is acceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Created post has all required fields\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseJson).to.have.property('id');\r",
							"    pm.expect(responseJson).to.have.property('title');\r",
							"    pm.expect(responseJson).to.have.property('body');\r",
							"    pm.expect(responseJson).to.have.property('userId');\r",
							"});\r",
							"\r",
							"pm.test(\"Created post contains submitted data\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    const submittedTitle = pm.environment.get(\"randomTitle\");\r",
							"    const submittedBody = pm.environment.get(\"randomBody\");\r",
							"    \r",
							"    pm.expect(responseJson.title).to.equal(submittedTitle);\r",
							"    pm.expect(responseJson.body).to.equal(submittedBody);\r",
							"    pm.expect(responseJson.userId).to.equal(1);\r",
							"});\r",
							"\r",
							"pm.test(\"New post has valid ID\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.id).to.be.a('number');\r",
							"    pm.expect(responseJson.id).to.be.above(0);\r",
							"    \r",
							"    // 생성된 ID를 저장 (후속 테스트에서 사용)\r",
							"    pm.environment.set(\"createdPostId\", responseJson.id.toString());\r",
							"});\r",
							"\r",
							"\r",
							"// ===========================================\r",
							"// 리포트를 위한 추가 스크립트\r",
							"// ===========================================\r",
							"\r",
							"// 각 테스트 후 실행되는 공통 스크립트 (Tests 탭 맨 아래 추가):\r",
							"pm.test(\"Record test execution\", function () {\r",
							"    const testName = pm.info.requestName;\r",
							"    const status = pm.response.code;\r",
							"    const responseTime = pm.response.responseTime;\r",
							"    \r",
							"    console.log(`✅ ${testName}: ${status} (${responseTime}ms)`);\r",
							"});\r",
							"\r",
							"// 실패한 테스트 상세 로깅\r",
							"pm.test.index > 0 && pm.test(\"Log failures for debugging\", function () {\r",
							"    if (pm.response.code >= 400) {\r",
							"        console.log(\"❌ Error Response Body:\", pm.response.text());\r",
							"        console.log(\"❌ Request Headers:\", JSON.stringify(pm.request.headers.toObject()));\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Create Post (Missing Fields)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===========================================\r",
							"// TC-005: POST /posts - 필수 필드 누락 테스트\r",
							"// ===========================================\r",
							"\r",
							"// Request Body (JSON 형식으로 설정):\r",
							"/*\r",
							"{\r",
							"  \"body\": \"Missing title field test\",\r",
							"  \"userId\": 1\r",
							"}\r",
							"*/\r",
							"\r",
							"// Tests 탭에 추가할 스크립트:\r",
							"pm.test(\"Handles missing required field\", function () {\r",
							"    // JSONPlaceholder는 실제 검증을 하지 않으므로 201을 반환할 수 있음\r",
							"    // 실제 API에서는 400이나 422를 기대\r",
							"    const validStatusCodes = [201, 400, 422];\r",
							"    pm.expect(validStatusCodes).to.include(pm.response.code);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is acceptable\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response structure is valid\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"// JSONPlaceholder의 경우 실제 검증을 하지 않으므로 로그로 확인\r",
							"pm.test(\"Log response for manual verification\", function () {\r",
							"    console.log(\"Response for missing field test:\", pm.response.json());\r",
							"});\r",
							"\r",
							"\r",
							"// ===========================================\r",
							"// 리포트를 위한 추가 스크립트\r",
							"// ===========================================\r",
							"\r",
							"// 각 테스트 후 실행되는 공통 스크립트 (Tests 탭 맨 아래 추가):\r",
							"pm.test(\"Record test execution\", function () {\r",
							"    const testName = pm.info.requestName;\r",
							"    const status = pm.response.code;\r",
							"    const responseTime = pm.response.responseTime;\r",
							"    \r",
							"    console.log(`✅ ${testName}: ${status} (${responseTime}ms)`);\r",
							"});\r",
							"\r",
							"// 실패한 테스트 상세 로깅\r",
							"pm.test.index > 0 && pm.test(\"Log failures for debugging\", function () {\r",
							"    if (pm.response.code >= 400) {\r",
							"        console.log(\"❌ Error Response Body:\", pm.response.text());\r",
							"        console.log(\"❌ Request Headers:\", JSON.stringify(pm.request.headers.toObject()));\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// ===========================================\r",
					"// 컬렉션 레벨 테스트 (Collection Pre-request Script)\r",
					"// ===========================================\r",
					"\r",
					"// 전체 컬렉션 실행 시 초기화\r",
					"console.log(\"Starting ShopAPI Test Suite\");\r",
					"console.log(\"Test Environment:\", pm.environment.name);\r",
					"console.log(\"Base URL:\", pm.environment.get(\"baseUrl\"));\r",
					"\r",
					"// 테스트 시작 시간 기록\r",
					"pm.environment.set(\"testSuiteStartTime\", new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}